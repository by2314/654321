name: Main

on:
  workflow_dispatch:
  push:
    branches: [ updates ]
    paths-ignore:
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/workflows/issue.yml'
      - '**.md'

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
    if: ${{ !startsWith(github.event.head_commit.message, '[skip ci]') }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: 0
      - name: Gradle wrapper validation
        uses: gradle/wrapper-validation-action@v3
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Write key
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/updates'
        run: |
          touch local.properties
          echo officialBuild=true >> local.properties
          echo buildWithGitSuffix=true >> local.properties
          echo storePassword='${{ secrets.KEY_STORE_PASSWORD }}' >> local.properties
          echo keyAlias='${{ secrets.ALIAS }}' >> local.properties
          echo keyPassword='${{ secrets.ALIAS_KEY_PASSWORD }}' >> local.properties
          echo fileDir=`pwd`/key.jks >> local.properties
          if! echo "${{ secrets.KEY_STORE }}" | base64 --decode > key.jks; then
            echo "Failed to decode KEY_STORE. Check the secret value."
            exit 1
          fi
          if! echo "${{ secrets.GOOGLE_SERVICES_JSON }}" | base64 --decode > app/google-services.json; then
            echo "Failed to decode GOOGLE_SERVICES_JSON. Check the secret value."
            exit 1
          fi
      - name: Cache gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key
      - name: Gradle prebuild
        run: |
          echo 'org.gradle.jvmargs=-Xmx2048m' >> gradle.properties
          ./gradlew prebuild --warning-mode all
      - name: Build release
        id: buildRelease
        run: |
          ./gradlew :app:buildRelease
          if [! -f app/build/apk/release/HMA*-release.apk ]; then
            echo "Release APK not found. Build may have failed."
            exit 1
          fi
          echo "releaseName=$(ls app/build/apk/release/HMA*-release.apk | awk -F '(/|.apk)' '{print $5}')" >> $GITHUB_OUTPUT
      - name: Build debug
        id: buildDebug
        run: |
          ./gradlew :app:buildDebug
          if [! -f app/build/apk/debug/HMA*-debug.apk ]; then
            echo "Debug APK not found. Build may have failed."
            exit 1
          fi
          echo "debugName=$(ls app/build/apk/debug/HMA*-debug.apk | awk -F '(/|.apk)' '{print $5}')" >> $GITHUB_OUTPUT
      - name: Upload release
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.buildRelease.outputs.releaseName }}
          path: "app/build/apk/release/HMA*-release.apk"
      - name: Upload debug
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.buildDebug.outputs.debugName }}
          path: "app/build/apk/debug/HMA*-debug.apk"
      - name: Upload mappings
        uses: actions/upload-artifact@v4
        with:
          name: mappings
          path: "app/build/outputs/mapping/release"
      - name: Post to group
        if: ${{ github.event_name != 'pull_request' && success() && github.ref == 'refs/heads/updates' }}
        env:
          CHANNEL_ID: ${{ secrets.TELEGRAM_CHANNEL }}
          TOPIC_ID: ${{ secrets.TELEGRAM_TOPIC }}
          BOT_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          COMMIT_URL: ${{ github.event.head_commit.url }}
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        run: |
          OUTPUT="app/build/apk/"
          release=$(find $OUTPUT -name "HMA*-release.apk" 2>/dev/null)
          debug=$(find $OUTPUT -name "HMA*-debug.apk" 2>/dev/null)
          if [ -z "$release" ] || [ -z "$debug" ]; then
            echo "One or both APKs not found. Cannot send to Telegram."
            exit 1
          fi
          COMMIT_MSG_ESCAPED=$(printf '%s' "$COMMIT_MESSAGE" | sed 's/[&/]/\\&/g')
          curl -v "https://api.telegram.org/bot${BOT_TOKEN}/sendMediaGroup?chat_id=${CHANNEL_ID}&message_thread_id=${TOPIC_ID}&media=%5B%7B%22type%22:%22document%22,%20%22media%22:%22attach://release%22%7D,%7B%22type%22:%22document%22,%20%22media%22:%22attach://debug%22,%22caption%22:${COMMIT_MSG_ESCAPED}%7D%5D"  -F release="@$release" -F debug="@$debug"
